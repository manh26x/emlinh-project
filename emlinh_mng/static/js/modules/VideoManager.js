console.log('üìÅ VideoManager.js loaded');

class VideoManager {
    constructor(notificationManager, uiManager) {
        console.log('‚úÖ VideoManager constructor called');
        this.notificationManager = notificationManager;
        this.uiManager = uiManager;
        this.sessionId = this.generateSessionId();
        this.currentVideoJob = null;
        this.initializeSocketIO();
        this.bindEvents();
    }
    
    generateSessionId() {
        return 'session_' + Math.random().toString(36).substr(2, 9);
    }
    
    initializeSocketIO() {
        try {
            this.socket = io();
            
            this.socket.on('connect', () => {
                console.log('üîå SocketIO connected');
                // Join session room ƒë·ªÉ nh·∫≠n updates
                this.socket.emit('join_session', { session_id: this.sessionId });
            });
            
            this.socket.on('disconnect', () => {
                console.log('üîå SocketIO disconnected');
            });
            
            // Listen cho video progress updates
            this.socket.on('video_progress', (data) => {
                this.handleVideoProgress(data);
            });
            
        } catch (error) {
            console.error('‚ùå Failed to initialize SocketIO:', error);
        }
    }
    
    handleVideoProgress(data) {
        console.log('üì∫ Video progress:', data);
        
        if (!this.currentVideoJob || this.currentVideoJob !== data.job_id) {
            return;
        }
        
        const { step, message, progress, data: stepData } = data;
        
        // C·∫≠p nh·∫≠t UI v·ªõi progress
        this.updateVideoProgress(step, message, progress, stepData);
        
        // N·∫øu ho√†n th√†nh ho·∫∑c l·ªói, clear current job
        if (step === 'completed' || step === 'failed') {
            this.currentVideoJob = null;
            this.uiManager.hideTypingIndicator();
            
            if (step === 'completed') {
                this.notificationManager.showSuccess('üé¨ Video ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
                // Hi·ªÉn th·ªã k·∫øt qu·∫£ video
                if (stepData && stepData.video_id) {
                    this.uiManager.addAIMessage(`Video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! <a href="/videos/${stepData.video_id}" target="_blank">Xem video</a>`);
                }
            } else {
                this.notificationManager.showError('‚ùå L·ªói t·∫°o video: ' + message);
                this.uiManager.addAIMessage('Xin l·ªói, c√≥ l·ªói x·∫£y ra khi t·∫°o video: ' + message);
            }
        }
    }
    
    updateVideoProgress(step, message, progress, stepData) {
        // T·∫°o progress message v·ªõi emoji v√† format ƒë·∫πp
        let progressMessage = this.formatProgressMessage(step, message, progress, stepData);
        
        // C·∫≠p nh·∫≠t typing indicator v·ªõi progress
        this.uiManager.updateTypingIndicator(progressMessage, progress);
    }
    
    formatProgressMessage(step, message, progress, stepData) {
        const stepEmojis = {
            'request_received': 'üìã',
            'initializing': 'üîß',
            'generating_script': '‚úçÔ∏è',
            'script_completed': 'üìù',
            'creating_record': 'üíæ',
            'record_created': '‚úÖ',
            'generating_audio': 'üéµ',
            'audio_completed': 'üîä',
            'rendering_video': 'üé¨',
            'video_rendering': '‚ö°',
            'finalizing': 'üéØ',
            'completed': 'üéâ',
            'failed': '‚ùå'
        };
        
        const emoji = stepEmojis[step] || '‚öôÔ∏è';
        let formattedMessage = `${emoji} ${message}`;
        
        if (progress > 0) {
            formattedMessage += ` (${progress}%)`;
        }
        
        // Th√™m th√¥ng tin chi ti·∫øt n·∫øu c√≥
        if (stepData) {
            if (stepData.script_preview) {
                formattedMessage += `\nüìÑ N·ªôi dung: ${stepData.script_preview}`;
            }
            if (stepData.audio_file) {
                formattedMessage += `\nüéµ File √¢m thanh: ${stepData.audio_file.split('/').pop()}`;
            }
        }
        
        return formattedMessage;
    }
    
    bindEvents() {
        const createVideoBtn = document.getElementById('createVideoBtn');
        if (createVideoBtn) {
            createVideoBtn.addEventListener('click', () => {
                this.showVideoCreationModal();
            });
        }
    }
    
    showVideoCreationModal() {
        const topic = prompt('Nh·∫≠p ch·ªß ƒë·ªÅ video b·∫°n mu·ªën t·∫°o:');
        if (!topic) return;
        
        this.createVideo(topic);
    }
    
    async createVideo(topic, duration = 15, composition = 'Scene-Landscape', background = 'office', voice = 'nova') {
        try {
            this.uiManager.addUserMessage(`T·∫°o video v·ªÅ: ${topic}`);
            this.uiManager.showTypingIndicator('üîß ƒêang kh·ªüi t·∫°o quy tr√¨nh t·∫°o video...', 5);
            
            const response = await fetch('/api/chat/create-video', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    topic: topic,
                    duration: duration,
                    composition: composition,
                    background: background,
                    voice: voice,
                    session_id: this.sessionId
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                // L∆∞u job ID ƒë·ªÉ track progress
                this.currentVideoJob = data.job_id;
                console.log('üé¨ Video creation started, job ID:', data.job_id);
                
                // Progress s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t qua SocketIO
                // Kh√¥ng c·∫ßn addAIMessage ·ªü ƒë√¢y v√¨ s·∫Ω ƒë∆∞·ª£c handle b·ªüi progress events
                
            } else {
                this.uiManager.hideTypingIndicator();
                this.uiManager.addAIMessage(`‚ùå L·ªói t·∫°o video: ${data.message}`);
                this.notificationManager.showError('L·ªói t·∫°o video: ' + data.message);
            }
            
        } catch (error) {
            console.error('Video creation error:', error);
            this.uiManager.hideTypingIndicator();
            this.uiManager.addAIMessage(`‚ùå L·ªói k·∫øt n·ªëi khi t·∫°o video: ${error.message}`);
            this.notificationManager.showError('L·ªói k·∫øt n·ªëi khi t·∫°o video: ' + error.message);
        } finally {
            this.uiManager.scrollToBottom();
        }
    }
    
    downloadVideo(videoId) {
        const link = document.createElement('a');
        link.href = `/api/videos/${videoId}/file`;
        link.download = '';
        link.click();
        this.notificationManager.showInfo('ƒêang t·∫£i video...');
    }
    
    async viewVideoDetail(videoId) {
        try {
            const response = await fetch(`/api/videos/${videoId}`);
            const data = await response.json();
            
            if (data.success) {
                this.showVideoDetailModal(data.video);
            } else {
                this.notificationManager.showError('L·ªói khi t·∫£i chi ti·∫øt video: ' + data.message);
            }
            
        } catch (error) {
            console.error('Error loading video detail:', error);
            this.notificationManager.showError('L·ªói k·∫øt n·ªëi khi t·∫£i chi ti·∫øt video');
        }
    }
    
    showVideoDetailModal(video) {
        const videoId = video.id;
        const modalHtml = `
            <div class="modal fade" id="videoDetailModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Chi ti·∫øt Video</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <video controls class="w-100" style="max-height: 300px;">
                                        <source src="/api/videos/${videoId}/file" type="video/mp4">
                                        Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ video.
                                    </video>
                                </div>
                                <div class="col-md-6">
                                    <h5>${this.escapeHtml(video.title)}</h5>
                                    <p><strong>Ch·ªß ƒë·ªÅ:</strong> ${this.escapeHtml(video.topic)}</p>
                                    <p><strong>Th·ªùi l∆∞·ª£ng:</strong> ${video.duration} gi√¢y</p>
                                    <p><strong>Tr·∫°ng th√°i:</strong> <span class="badge bg-success">Ho√†n th√†nh</span></p>
                                    <p><strong>Ng√†y t·∫°o:</strong> ${new Date(video.created_at).toLocaleDateString('vi-VN')}</p>
                                    ${video.script ? `
                                        <div class="mt-3">
                                            <h6>Script:</h6>
                                            <div class="bg-light p-3 rounded small">
                                                ${this.escapeHtml(video.script)}
                                            </div>
                                        </div>
                                    ` : ''}
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ƒê√≥ng</button>
                            <button type="button" class="btn btn-primary" onclick="videoManager.downloadVideo(${videoId})">
                                <i class="fas fa-download"></i> T·∫£i v·ªÅ
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Remove existing modal if any
        const existingModal = document.getElementById('videoDetailModal');
        if (existingModal) {
            existingModal.remove();
        }
        
        // Add modal to body
        document.body.insertAdjacentHTML('beforeend', modalHtml);
        
        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('videoDetailModal'));
        modal.show();
        
        // Clean up when modal is hidden
        document.getElementById('videoDetailModal').addEventListener('hidden.bs.modal', function() {
            this.remove();
        });
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// Export for test environment
if (typeof global !== 'undefined') {
    global.VideoManager = VideoManager;
} 