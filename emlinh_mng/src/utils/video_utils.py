"""
Video Utilities - Utility functions cho video rendering v√† processing
"""

import os
import time
import subprocess
import json
from typing import Dict, Any, Optional
from ..app.config import Config


class VideoUtils:
    """Utility class cho video operations"""
    
    @staticmethod
    def render_video(
        audio_file: str,
        duration: int,
        composition: str = "Scene-Portrait",
        background: str = "abstract",
        topic: str = ""
    ) -> str:
        """
        Render video v·ªõi audio v√† th√¥ng s·ªë ƒë√£ cho s·ª≠ d·ª•ng Remotion
        
        Args:
            audio_file: ƒê∆∞·ªùng d·∫´n file audio
            duration: Th·ªùi l∆∞·ª£ng video (gi√¢y)
            composition: Lo·∫°i composition
            background: Background scene
            topic: Ch·ªß ƒë·ªÅ video (ƒë·ªÉ t·∫°o t√™n file)
            
        Returns:
            str: ƒê∆∞·ªùng d·∫´n file video ƒë√£ render
        """
        try:
            # T·∫°o t√™n file output
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            safe_topic = topic.replace(" ", "_").replace("/", "_")[:20]
            output_filename = f"video_{timestamp}_{safe_topic}.mp4"
            
            # S·ª≠ d·ª•ng config ƒë·ªÉ l·∫•y ƒë∆∞·ªùng d·∫´n
            output_dir = Config.WORKSPACE_ROOT
            output_path = os.path.join(output_dir, output_filename)
            
            # ƒê∆∞·ªùng d·∫´n Remotion project
            remotion_path = Config.REMOTION_PATH
            
            # T·∫°o directory n·∫øu ch∆∞a t·ªìn t·∫°i v√† c√≥ quy·ªÅn
            try:
                parent_dir = os.path.dirname(output_dir)
                if os.path.exists(parent_dir) and os.access(parent_dir, os.W_OK):
                    os.makedirs(output_dir, exist_ok=True)
                else:
                    print(f"Warning: Cannot create output directory {output_dir} - no write permission")
            except (OSError, PermissionError) as e:
                print(f"Warning: Cannot create output directory {output_dir}: {e}")
            
            print(f"üé¨ Rendering video v·ªõi Remotion: {output_filename}")
            print(f"   - Audio: {audio_file}")
            print(f"   - Duration: {duration}s")
            print(f"   - Composition: {composition}")
            print(f"   - Background: {background}")
            
            # Chu·∫©n b·ªã props cho Remotion
            # L·∫•y t√™n file audio (kh√¥ng c√≥ ƒë∆∞·ªùng d·∫´n)
            audio_filename = os.path.basename(audio_file)
            
            # Props cho Remotion
            props = {
                "durationInSeconds": duration,
                "audioFileName": audio_filename,
                "backgroundScene": background
            }
            
            # Ch·∫°y Remotion render
            result = VideoUtils._render_with_remotion(
                remotion_path, composition, output_path, props
            )
            
            if result:
                print(f"‚úÖ Video rendered successfully: {output_path}")
                return output_path
            else:
                raise Exception("Remotion render failed")
                
        except Exception as e:
            print(f"‚ùå Video rendering failed: {str(e)}")
            raise
    
    @staticmethod
    def _render_with_remotion(
        remotion_path: str,
        composition: str,
        output_path: str,
        props: Dict[str, Any]
    ) -> bool:
        """
        Render video s·ª≠ d·ª•ng Remotion CLI
        
        Args:
            remotion_path: ƒê∆∞·ªùng d·∫´n project Remotion
            composition: ID composition
            output_path: ƒê∆∞·ªùng d·∫´n file output
            props: Properties cho composition
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        try:
            # Chu·∫©n b·ªã command
            props_json = json.dumps(props)
            
            cmd = [
                "npx", "remotion", "render",
                composition,
                output_path,
                "--props", props_json,
                "--concurrency", "1"
            ]
            
            print(f"üîß Running Remotion command: {' '.join(cmd)}")
            print(f"üîß Props: {props_json}")
            
            # Ch·∫°y command
            result = subprocess.run(
                cmd,
                cwd=remotion_path,
                capture_output=True,
                text=True,
                timeout=300  # 5 ph√∫t timeout
            )
            
            if result.returncode == 0:
                print("‚úÖ Remotion render completed successfully")
                return True
            else:
                print(f"‚ùå Remotion render failed:")
                print(f"stdout: {result.stdout}")
                print(f"stderr: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print("‚ùå Remotion render timeout (5 minutes)")
            return False
        except Exception as e:
            print(f"‚ùå Remotion render error: {str(e)}")
            return False
    
    @staticmethod
    def get_video_info(video_path: str) -> Dict[str, Any]:
        """
        L·∫•y th√¥ng tin video
        
        Args:
            video_path: ƒê∆∞·ªùng d·∫´n video
            
        Returns:
            Dict: Th√¥ng tin video
        """
        try:
            if not os.path.exists(video_path):
                return {"error": "File not found"}
            
            file_size = os.path.getsize(video_path)
            
            # Th·ª≠ l·∫•y th√¥ng tin chi ti·∫øt b·∫±ng ffprobe
            try:
                cmd = [
                    "ffprobe", "-v", "quiet", "-print_format", "json",
                    "-show_format", "-show_streams", video_path
                ]
                result = subprocess.run(cmd, capture_output=True, text=True)
                
                if result.returncode == 0:
                    probe_data = json.loads(result.stdout)
                    return {
                        "path": video_path,
                        "size": file_size,
                        "exists": True,
                        "probe_data": probe_data
                    }
            except:
                pass
            
            return {
                "path": video_path,
                "size": file_size,
                "exists": True
            }
            
        except Exception as e:
            return {"error": str(e)}
    
    @staticmethod
    def cleanup_temp_files(file_paths: list):
        """
        D·ªçn d·∫πp c√°c file t·∫°m
        
        Args:
            file_paths: Danh s√°ch ƒë∆∞·ªùng d·∫´n file c·∫ßn x√≥a
        """
        for file_path in file_paths:
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    print(f"üóëÔ∏è Cleaned up: {file_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è Could not clean up {file_path}: {str(e)}")
    
    @staticmethod
    def create_mouthcues_json(audio_file: str, text: str) -> str:
        """
        T·∫°o file JSON mouthCues cho lipsync t·ª´ audio file
        
        Args:
            audio_file: ƒê∆∞·ªùng d·∫´n file audio
            text: Text g·ªëc
            
        Returns:
            str: ƒê∆∞·ªùng d·∫´n file JSON mouthCues
        """
        try:
            # T·∫°o ƒë∆∞·ªùng d·∫´n file JSON
            json_path = audio_file.replace('.wav', '.json')
            
            # T√≠nh to√°n duration t·ª´ text (∆∞·ªõc t√≠nh)
            estimated_duration = max(5, len(text) // 20)
            
            # T·∫°o mouthCues ƒë∆°n gi·∫£n d·ª±a tr√™n duration
            mouth_cues = VideoUtils._generate_simple_mouth_cues(estimated_duration)
            
            # T·∫°o metadata
            metadata = {
                "metadata": {
                    "soundFile": audio_file,
                    "duration": estimated_duration
                },
                "mouthCues": mouth_cues
            }
            
            # Ghi file JSON
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Created mouthCues JSON: {json_path}")
            return json_path
            
        except Exception as e:
            print(f"‚ùå Failed to create mouthCues JSON: {str(e)}")
            raise
    
    @staticmethod
    def _generate_simple_mouth_cues(duration: float) -> list:
        """
        T·∫°o mouthCues ƒë∆°n gi·∫£n cho duration cho tr∆∞·ªõc
        
        Args:
            duration: Th·ªùi l∆∞·ª£ng audio (gi√¢y)
            
        Returns:
            list: Danh s√°ch mouthCues
        """
        mouth_cues = []
        
        # T·∫°o cues ƒë∆°n gi·∫£n v·ªõi pattern l·∫∑p l·∫°i
        visemes = ['X', 'B', 'C', 'E', 'A', 'D', 'G']
        cue_duration = 0.1  # M·ªói cue 0.1 gi√¢y
        
        current_time = 0.0
        viseme_index = 0
        
        while current_time < duration:
            end_time = min(current_time + cue_duration, duration)
            
            mouth_cues.append({
                "start": round(current_time, 2),
                "end": round(end_time, 2),
                "value": visemes[viseme_index % len(visemes)]
            })
            
            current_time = end_time
            viseme_index += 1
        
        return mouth_cues 