#!/usr/bin/env python3
"""
Video Production Flow - S·ª≠ d·ª•ng CrewAI Flow ƒë·ªÉ t·ªëi ∆∞u quy tr√¨nh s·∫£n xu·∫•t video
"""

from typing import Dict, Any, Optional
from pydantic import BaseModel, Field
from crewai.flow.flow import Flow, listen, start, router
from crewai import Agent, LLM
import time
import os
import asyncio
import json

from .video_service import VideoService
from .tts_service import TTSService
from src.app.app import db
from src.app.models import Video
from src.utils.video_utils import VideoUtils
from src.utils.tts_utils import TTSUtils


class VideoProductionState(BaseModel):
    """State model for video production workflow"""
    # Input parameters
    topic: str = ""
    duration: int = 30
    composition: str = "Scene-Portrait"
    background: str = "abstract"
    voice: str = "fable"
    
    # Processing state
    script: str = ""
    video_id: Optional[int] = None
    audio_file: str = ""
    video_file: str = ""
    
    # Status tracking
    current_step: str = "initialized"
    progress: float = 0.0
    error_message: str = ""
    
    # Final result
    result: Dict[str, Any] = {}


class VideoProductionResponse(BaseModel):
    """Structured response for video production"""
    success: bool = Field(description="Whether the video production was successful")
    message: str = Field(description="Human-readable message about the result")
    video_id: Optional[int] = Field(description="Database ID of the created video")
    video_url: Optional[str] = Field(description="URL to access the video")
    video_path: Optional[str] = Field(description="File path of the video")
    script: Optional[str] = Field(description="Generated script content")
    duration: Optional[int] = Field(description="Video duration in seconds")
    composition: Optional[str] = Field(description="Video composition type")
    background: Optional[str] = Field(description="Background type used")
    voice: Optional[str] = Field(description="Voice type used for TTS")
    error: Optional[str] = Field(description="Error message if failed")


class VideoProductionFlow(Flow[VideoProductionState]):
    """
    Advanced video production workflow using CrewAI Flow
    
    This Flow orchestrates the complete video production process:
    1. Initialize ‚Üí 2. Generate Script ‚Üí 3. Create DB Record ‚Üí 4. Start TTS 
    ‚Üí 5. Monitor TTS ‚Üí 6. Start Video Render ‚Üí 7. Monitor Video ‚Üí 8. Finalize
    """
    
    def __init__(self):
        super().__init__()
        self.video_service = VideoService()
        self.tts_service = TTSService()
        self.script_agent = self._create_script_agent()
    
    def _create_script_agent(self) -> Agent:
        """T·∫°o agent chuy√™n v·ªÅ vi·ªác t·∫°o script cho video"""
        return Agent(
            role='Video Script Writer',
            goal='T·∫°o script h·∫•p d·∫´n v√† ph√π h·ª£p cho video AI avatar',
            backstory="""B·∫°n l√† m·ªôt chuy√™n gia vi·∫øt script cho video c√≥ kinh nghi·ªám nhi·ªÅu nƒÉm. 
            B·∫°n bi·∫øt c√°ch t·∫°o n·ªôi dung h·∫•p d·∫´n, d·ªÖ hi·ªÉu v√† ph√π h·ª£p v·ªõi th·ªùi l∆∞·ª£ng video ƒë∆∞·ª£c y√™u c·∫ßu.
            
            Nguy√™n t·∫Øc vi·∫øt script:
            - N·ªôi dung ph·∫£i s√∫c t√≠ch v√† thu h√∫t ng∆∞·ªùi xem
            - S·ª≠ d·ª•ng ng√¥n ng·ªØ t·ª± nhi√™n, d·ªÖ hi·ªÉu
            - T·ªëc ƒë·ªô ƒë·ªçc kho·∫£ng 150 t·ª´/ph√∫t
            - B·∫Øt ƒë·∫ßu v·ªõi l·ªùi ch√†o th√¢n thi·ªán
            - K·∫øt th√∫c b·∫±ng l·ªùi c·∫£m ∆°n ho·∫∑c k√™u g·ªçi h√†nh ƒë·ªông
            """,
            verbose=True,
            allow_delegation=False
        )
    
    @start()
    def initialize_production(self) -> Dict[str, Any]:
        """
        Initialize the video production workflow
        
        Returns:
            Dict containing initial state information
        """
        try:
            print(f"üé¨ Starting video production for topic: {self.state.topic}")
            self.state.current_step = "initializing"
            self.state.progress = 10.0
            
            # Validate input parameters
            if not self.state.topic:
                raise ValueError("Topic is required")
            
            if self.state.duration < 5 or self.state.duration > 300:
                raise ValueError("Duration must be between 5 and 300 seconds")
            
            print(f"‚úÖ Parameters validated - Duration: {self.state.duration}s, Voice: {self.state.voice}")
            
            return {
                "topic": self.state.topic,
                "duration": self.state.duration,
                "composition": self.state.composition,
                "background": self.state.background,
                "voice": self.state.voice,
                "status": "initialized"
            }
            
        except Exception as e:
            self.state.error_message = str(e)
            self.state.current_step = "failed"
            print(f"‚ùå Initialization failed: {e}")
            raise
    
    @listen(initialize_production)
    def generate_script(self, init_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generate script content using LLM
        
        Args:
            init_data: Data from initialization step
            
        Returns:
            Dict containing script and metadata
        """
        try:
            print("üìù Generating script...")
            self.state.current_step = "generating_script"
            self.state.progress = 25.0
            
            # Initialize LLM for script generation
            llm = LLM(model="openai/gpt-4o-mini")
            
            # Create script generation prompt - CH·ªà T·∫†O B√ÄI N√ìI ƒê∆†N GI·∫¢N
            messages = [
                {
                    "role": "system", 
                    "content": """B·∫°n l√† m·ªôt chuy√™n gia vi·∫øt n·ªôi dung. Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o ra m·ªôt B√ÄI N√ìI ng·∫Øn g·ªçn v√† s√∫c t√≠ch.

QUAN TR·ªåNG: 
- CH·ªà vi·∫øt n·ªôi dung B√ÄI N√ìI, KH√îNG vi·∫øt k·ªãch b·∫£n
- KH√îNG ƒë·ªÅ c·∫≠p ƒë·∫øn √¢m nh·∫°c, h√¨nh ·∫£nh, ng∆∞·ªùi d·∫´n ch∆∞∆°ng tr√¨nh
- KH√îNG s·ª≠ d·ª•ng format k·ªãch b·∫£n nh∆∞ **[M·ªü ƒë·∫ßu]**, **Ng∆∞·ªùi d·∫´n:**
- CH·ªà vi·∫øt vƒÉn b·∫£n thu·∫ßn t√∫y nh∆∞ m·ªôt b√†i n√≥i t·ª± nhi√™n
- S·ª≠ d·ª•ng ng√¥n ng·ªØ th√¢n thi·ªán, d·ªÖ hi·ªÉu
- N·ªôi dung ph√π h·ª£p v·ªõi th·ªùi l∆∞·ª£ng ƒë∆∞·ª£c y√™u c·∫ßu"""
                },
                {
                    "role": "user", 
                    "content": f"""
                    H√£y vi·∫øt m·ªôt b√†i n√≥i ng·∫Øn v·ªÅ ch·ªß ƒë·ªÅ: {self.state.topic}
                    
                    Y√™u c·∫ßu:
                    - Th·ªùi l∆∞·ª£ng: {self.state.duration} gi√¢y (kho·∫£ng {self.state.duration * 3} t·ª´)
                    - B·∫Øt ƒë·∫ßu v·ªõi l·ªùi ch√†o ƒë∆°n gi·∫£n
                    - N·ªôi dung ch√≠nh s√∫c t√≠ch v·ªÅ ch·ªß ƒë·ªÅ
                    - K·∫øt th√∫c t√≠ch c·ª±c
                    - Ch·ªâ vi·∫øt vƒÉn b·∫£n n√≥i, kh√¥ng format k·ªãch b·∫£n
                    - S·ª≠ d·ª•ng ti·∫øng Vi·ªát t·ª± nhi√™n
                    
                    V√≠ d·ª• format mong mu·ªën:
                    "Xin ch√†o c√°c b·∫°n! H√¥m nay t√¥i mu·ªën chia s·∫ª v·ªÅ [ch·ªß ƒë·ªÅ]. [N·ªôi dung ch√≠nh 2-3 c√¢u]. C·∫£m ∆°n c√°c b·∫°n ƒë√£ l·∫Øng nghe!"
                    """
                }
            ]
            
            # Generate script
            response = llm.call(messages=messages)
            script_content = response.strip()
            
            # L√†m s·∫°ch script - lo·∫°i b·ªè c√°c format kh√¥ng mong mu·ªën
            script_content = self._clean_script_content(script_content)
            
            # Store script in state
            self.state.script = script_content
            
            print(f"‚úÖ B√†i n√≥i generated ({len(script_content)} characters)")
            print(f"üìù Content preview: {script_content[:100]}...")
            
            return {
                "script": script_content,
                "topic": self.state.topic,
                "duration": self.state.duration,
                "status": "script_generated"
            }
            
        except Exception as e:
            self.state.error_message = str(e)
            self.state.current_step = "failed"
            print(f"‚ùå Script generation failed: {e}")
            raise
    
    def _clean_script_content(self, script: str) -> str:
        """
        L√†m s·∫°ch script content, lo·∫°i b·ªè format k·ªãch b·∫£n kh√¥ng mong mu·ªën
        
        Args:
            script: Script g·ªëc t·ª´ LLM
            
        Returns:
            str: Script ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch
        """
        # Lo·∫°i b·ªè c√°c d·∫•u hi·ªáu format k·ªãch b·∫£n
        lines_to_remove = [
            "**K·ªãch b·∫£n", "**[", "**Ng∆∞·ªùi", "**H√¨nh ·∫£nh", 
            "*(H√¨nh ·∫£nh", "*(√Çm nh·∫°c", "*V·ªÅ h√¨nh ·∫£nh",
            "---", "# ", "## ", "### "
        ]
        
        lines = script.split('\n')
        clean_lines = []
        
        for line in lines:
            line = line.strip()
            
            # B·ªè qua d√≤ng tr·ªëng
            if not line:
                continue
                
            # B·ªè qua c√°c d√≤ng c√≥ format k·ªãch b·∫£n
            should_skip = False
            for pattern in lines_to_remove:
                if pattern in line:
                    should_skip = True
                    break
            
            if should_skip:
                continue
                
            # Lo·∫°i b·ªè c√°c k√Ω t·ª± format
            line = line.replace("**", "").replace("*", "")
            line = line.replace("[", "").replace("]", "")
            
            # B·ªè qua c√°c d√≤ng qu√° ng·∫Øn (c√≥ th·ªÉ l√† stage direction)
            if len(line) < 10:
                continue
                
            clean_lines.append(line)
        
        # N·ªëi c√°c d√≤ng l·∫°i th√†nh m·ªôt ƒëo·∫°n vƒÉn
        clean_script = " ".join(clean_lines)
        
        # L√†m s·∫°ch kho·∫£ng tr·∫Øng th·ª´a
        clean_script = " ".join(clean_script.split())
        
        return clean_script
    
    @listen(generate_script)
    def create_database_record(self, script_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Create video record in database
        
        Args:
            script_data: Data from script generation step
            
        Returns:
            Dict containing video record information
        """
        try:
            print("üíæ Creating database record...")
            self.state.current_step = "creating_record"
            self.state.progress = 35.0
            
            # Import Flask app ƒë·ªÉ c√≥ application context
            from flask import current_app
            
            # S·ª≠ d·ª•ng application context n·∫øu c√≥
            try:
                # Ki·ªÉm tra xem c√≥ app context kh√¥ng
                current_app._get_current_object()
                app_context = None
            except RuntimeError:
                # T·∫°o app context m·ªõi
                from ..app.app import create_app
                app = create_app()
                app_context = app.app_context()
                app_context.push()
            
            try:
                # Create video record v·ªõi temporary file path
                video = Video(
                    title=f"Video v·ªÅ {self.state.topic}",
                    topic=self.state.topic,
                    script=self.state.script,
                    duration=self.state.duration,
                    composition=self.state.composition,
                    background=self.state.background,
                    voice=self.state.voice,
                    status='processing',
                    file_path='',  # Temporary empty string, s·∫Ω c·∫≠p nh·∫≠t sau
                    file_name=f"video_{self.state.topic.replace(' ', '_')}.mp4"
                )
                
                db.session.add(video)
                db.session.commit()
                
                # Store video ID in state
                self.state.video_id = video.id
                
                print(f"‚úÖ Database record created with ID: {video.id}")
                
                return {
                    "video_id": video.id,
                    "script": self.state.script,
                    "topic": self.state.topic,
                    "status": "record_created"
                }
                
            finally:
                # Cleanup app context n·∫øu ƒë√£ t·∫°o
                if app_context:
                    app_context.pop()
            
        except Exception as e:
            self.state.error_message = str(e)
            self.state.current_step = "failed"
            print(f"‚ùå Database record creation failed: {e}")
            raise
    
    @listen(create_database_record)
    def start_tts_generation(self, record_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Start Text-to-Speech generation
        
        Args:
            record_data: Data from database creation step
            
        Returns:
            Dict containing TTS job information
        """
        try:
            print("üé§ Starting TTS generation...")
            self.state.current_step = "starting_tts"
            self.state.progress = 45.0
            
            # Generate TTS v·ªõi mouthCues JSON
            audio_file = TTSUtils.generate_tts(
                text=self.state.script,
                voice=self.state.voice
            )
            
            # Store audio file path
            self.state.audio_file = audio_file
            
            print(f"‚úÖ TTS generated: {audio_file}")
            
            # Ki·ªÉm tra mouthCues JSON ƒë√£ ƒë∆∞·ª£c t·∫°o
            json_path = audio_file.replace('.wav', '.json')
            if os.path.exists(json_path):
                print(f"‚úÖ MouthCues JSON created: {json_path}")
            else:
                print(f"‚ö†Ô∏è MouthCues JSON not found: {json_path}")
            
            return {
                "audio_file": audio_file,
                "video_id": self.state.video_id,
                "status": "tts_completed"
            }
            
        except Exception as e:
            self.state.error_message = str(e)
            self.state.current_step = "failed"
            print(f"‚ùå TTS generation failed: {e}")
            raise
    
    @listen(start_tts_generation)
    def start_video_render(self, tts_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Start video rendering process
        
        Args:
            tts_data: Data from TTS generation step
            
        Returns:
            Dict containing render job information
        """
        try:
            print("üé¨ Starting video render...")
            self.state.current_step = "starting_render"
            self.state.progress = 65.0
            
            # Start video rendering s·ª≠ d·ª•ng VideoUtils ƒë√£ c·∫£i thi·ªán
            video_file = VideoUtils.render_video(
                audio_file=self.state.audio_file,
                duration=self.state.duration,
                composition=self.state.composition,
                background=self.state.background,
                topic=self.state.topic
            )
            
            # Store video file path
            self.state.video_file = video_file
            
            print(f"‚úÖ Video rendered: {video_file}")
            
            return {
                "video_file": video_file,
                "audio_file": self.state.audio_file,
                "video_id": self.state.video_id,
                "status": "render_completed"
            }
            
        except Exception as e:
            self.state.error_message = str(e)
            self.state.current_step = "failed"
            print(f"‚ùå Video rendering failed: {e}")
            raise
    
    @listen(start_video_render)
    def finalize_production(self, render_data: Dict[str, Any]) -> VideoProductionResponse:
        """
        Finalize video production and return structured response
        
        Args:
            render_data: Data from video rendering step
            
        Returns:
            VideoProductionResponse: Structured response with all video information
        """
        try:
            print("üéØ Finalizing production...")
            self.state.current_step = "finalizing"
            self.state.progress = 90.0
            
            # Update database record v·ªõi application context
            from flask import current_app
            
            # S·ª≠ d·ª•ng application context n·∫øu c√≥
            try:
                current_app._get_current_object()
                app_context = None
            except RuntimeError:
                from ..app.app import create_app
                app = create_app()
                app_context = app.app_context()
                app_context.push()
            
            try:
                video = Video.query.get(self.state.video_id)
                if video:
                    video.file_path = self.state.video_file
                    video.file_name = self.state.video_file.split('/')[-1]
                    video.status = 'completed'
                    
                    # Get file size
                    if os.path.exists(self.state.video_file):
                        video.file_size = os.path.getsize(self.state.video_file)
                    
                    db.session.commit()
                    
                    print(f"‚úÖ Database updated for video ID: {video.id}")
            finally:
                if app_context:
                    app_context.pop()
            
            # Create structured response
            response = VideoProductionResponse(
                success=True,
                message=f"Video v·ªÅ '{self.state.topic}' ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!",
                video_id=self.state.video_id,
                video_url=f"/api/videos/{self.state.video_id}/file",
                video_path=self.state.video_file,
                script=self.state.script,
                duration=self.state.duration,
                composition=self.state.composition,
                background=self.state.background,
                voice=self.state.voice,
                error=None
            )
            
            # Store final result in state
            self.state.result = response.dict()
            self.state.current_step = "completed"
            self.state.progress = 100.0
            
            print("üéâ Video production completed successfully!")
            
            return response
            
        except Exception as e:
            self.state.error_message = str(e)
            self.state.current_step = "failed"
            print(f"‚ùå Production finalization failed: {e}")
            
            # Return error response
            return VideoProductionResponse(
                success=False,
                message=f"C√≥ l·ªói x·∫£y ra khi t·∫°o video: {str(e)}",
                video_id=self.state.video_id,
                video_url=None,
                video_path=None,
                script=self.state.script,
                duration=self.state.duration,
                composition=self.state.composition,
                background=self.state.background,
                voice=self.state.voice,
                error=str(e)
            )
    
    def get_production_summary(self) -> Dict[str, Any]:
        """L·∫•y t√≥m t·∫Øt k·∫øt qu·∫£ s·∫£n xu·∫•t video"""
        return {
            "success": self.state.current_step == "completed",
            "video_id": self.state.video_id,
            "topic": self.state.topic,
            "script": self.state.script,
            "audio_file": self.state.audio_file,
            "video_path": self.state.video_file,
            "duration": self.state.duration,
            "composition": self.state.composition,
            "background": self.state.background,
            "voice": self.state.voice,
            "current_step": self.state.current_step,
            "progress": self.state.progress,
            "error_message": self.state.error_message
        }


def create_video_from_topic(
    topic: str,
    duration: int = 15,
    composition: str = "Scene-Landscape", 
    background: str = "office",
    voice: str = "nova"
) -> Dict[str, Any]:
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ t·∫°o video t·ª´ ch·ªß ƒë·ªÅ s·ª≠ d·ª•ng Flow
    
    Args:
        topic: Ch·ªß ƒë·ªÅ c·ªßa video
        duration: Th·ªùi l∆∞·ª£ng video (gi√¢y)
        composition: Lo·∫°i composition
        background: Background scene
        voice: Gi·ªçng ƒë·ªçc TTS
        
    Returns:
        Dict ch·ª©a th√¥ng tin k·∫øt qu·∫£ v√† tr·∫°ng th√°i
    """
    
    # Kh·ªüi t·∫°o flow v·ªõi state ban ƒë·∫ßu
    flow = VideoProductionFlow()
    flow.state.topic = topic
    flow.state.duration = duration
    flow.state.composition = composition
    flow.state.background = background
    flow.state.voice = voice
    
    try:
        # Ch·∫°y flow
        print(f"üöÄ [MAIN] B·∫Øt ƒë·∫ßu s·∫£n xu·∫•t video v·ªõi Flow")
        print(f"üöÄ [MAIN] Ch·ªß ƒë·ªÅ: {topic}")
        
        result = flow.kickoff()
        summary = flow.get_production_summary()
        
        print(f"üèÅ [MAIN] K·∫øt th√∫c Flow - Tr·∫°ng th√°i: {summary['current_step']}")
        
        return summary
        
    except Exception as e:
        print(f"üö® [MAIN] L·ªói nghi√™m tr·ªçng trong Flow: {str(e)}")
        return {
            "success": False,
            "error_message": f"Flow execution error: {str(e)}",
            "current_step": "flow_failed"
        }


# Test function ƒë·ªÉ demo flow
def demo_video_production():
    """Demo function ƒë·ªÉ test Video Production Flow"""
    print("üé¨ Demo Video Production Flow")
    print("=" * 50)
    
    result = create_video_from_topic(
        topic="Tr√≠ tu·ªá nh√¢n t·∫°o trong t∆∞∆°ng lai",
        duration=10,
        composition="Scene-Landscape",
        background="office", 
        voice="nova"
    )
    
    print("\nüìä K·∫øt qu·∫£ Demo:")
    print(f"- Th√†nh c√¥ng: {result['success']}")
    print(f"- B∆∞·ªõc hi·ªán t·∫°i: {result['current_step']}")
    if result.get('video_id'):
        print(f"- Video ID: {result['video_id']}")
    if result.get('error_message'):
        print(f"- L·ªói: {result['error_message']}")


if __name__ == "__main__":
    demo_video_production() 