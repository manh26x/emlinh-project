#!/usr/bin/env python3
"""
Flow Service - Qu·∫£n l√Ω v√† ƒëi·ªÅu ph·ªëi c√°c Flow trong h·ªá th·ªëng EmLinh AI

Service n√†y cung c·∫•p interface ƒë·ªÉ:
1. T·∫°o v√† qu·∫£n l√Ω video production flows
2. Theo d√µi ti·∫øn tr√¨nh v√† tr·∫°ng th√°i flows
3. X·ª≠ l√Ω k·∫øt qu·∫£ v√† tr·∫£ v·ªÅ JSON responses
4. T√≠ch h·ª£p v·ªõi h·ªá th·ªëng chat v√† database
"""

from typing import Dict, Any, Optional
import json
import asyncio
from datetime import datetime
import re
from crewai import LLM

from .video_production_flow import VideoProductionFlow, VideoProductionResponse


class FlowService:
    """
    Service qu·∫£n l√Ω CrewAI Flows cho h·ªá th·ªëng EmLinh AI
    
    ƒê√¢y l√† service ch√≠nh ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi c√°c Flow workflows,
    thay th·∫ø cho crew-based approach truy·ªÅn th·ªëng.
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o FlowService"""
        self.active_flows = {}  # Theo d√µi c√°c flow ƒëang ch·∫°y
    
    def create_video_with_flow(
        self, 
        topic: str, 
        duration: int = 30,
        composition: str = "Scene-Portrait",
        background: str = "abstract", 
        voice: str = "fable"
    ) -> Dict[str, Any]:
        """
        T·∫°o video s·ª≠ d·ª•ng VideoProductionFlow
        
        Args:
            topic: Ch·ªß ƒë·ªÅ video
            duration: Th·ªùi l∆∞·ª£ng video (gi√¢y)
            composition: Lo·∫°i composition
            background: Background scene
            voice: Gi·ªçng TTS
            
        Returns:
            Dict: JSON response v·ªõi th√¥ng tin video ƒë√£ t·∫°o
        """
        try:
            print(f"üöÄ [FLOW] Starting video production flow for topic: {topic}")
            
            # ƒê·∫£m b·∫£o c√≥ Flask application context
            from flask import current_app
            
            try:
                current_app._get_current_object()
                app_context = None
            except RuntimeError:
                from ..app.app import create_app
                app = create_app()  # create_app returns app only
                app_context = app.app_context()
                app_context.push()
            
            try:
                # T·∫°o v√† c·∫•u h√¨nh flow
                flow = VideoProductionFlow()
                flow.state.topic = topic
                flow.state.duration = duration
                flow.state.composition = composition
                flow.state.background = background
                flow.state.voice = voice
                
                # L∆∞u flow v√†o active flows ƒë·ªÉ tracking
                flow_id = f"video_{topic}_{len(self.active_flows)}"
                self.active_flows[flow_id] = flow
                
                # Ch·∫°y flow v√† l·∫•y k·∫øt qu·∫£
                print(f"‚ñ∂Ô∏è [FLOW] Executing flow: {flow_id}")
                result = flow.kickoff()
                
                # X·ª≠ l√Ω k·∫øt qu·∫£
                if isinstance(result, VideoProductionResponse):
                    response_dict = result.dict()
                    print(f"‚úÖ [FLOW] Flow completed successfully")
                    
                    # Th√™m metadata
                    response_dict["flow_id"] = flow_id
                    response_dict["flow_type"] = "video_production"
                    response_dict["timestamp"] = flow.state.result.get("timestamp", "")
                    
                    return response_dict
                else:
                    # Fallback n·∫øu result kh√¥ng ph·∫£i VideoProductionResponse
                    print(f"‚ö†Ô∏è [FLOW] Unexpected result type: {type(result)}")
                    return {
                        "success": False,
                        "message": "Flow completed but returned unexpected result format",
                        "error": f"Expected VideoProductionResponse, got {type(result)}",
                        "flow_id": flow_id,
                        "raw_result": str(result)
                    }
                    
            finally:
                if app_context:
                    app_context.pop()
                
        except Exception as e:
            print(f"‚ùå [FLOW] Video production flow failed: {str(e)}")
            return {
                "success": False,
                "message": f"C√≥ l·ªói x·∫£y ra khi t·∫°o video: {str(e)}",
                "error": str(e),
                "video_id": None,
                "video_url": None,
                "video_path": None,
                "script": None,
                "duration": duration,
                "composition": composition,
                "background": background,
                "voice": voice
            }
    
    async def create_video_with_flow_async(
        self,
        topic: str,
        duration: int = 30,
        composition: str = "Scene-Portrait", 
        background: str = "abstract",
        voice: str = "fable"
    ) -> Dict[str, Any]:
        """
        Async version c·ªßa create_video_with_flow
        
        Args:
            topic: Ch·ªß ƒë·ªÅ video
            duration: Th·ªùi l∆∞·ª£ng video (gi√¢y)
            composition: Lo·∫°i composition
            background: Background scene
            voice: Gi·ªçng TTS
            
        Returns:
            Dict: JSON response v·ªõi th√¥ng tin video ƒë√£ t·∫°o
        """
        # Ch·∫°y sync method trong thread pool
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(
            None,
            self.create_video_with_flow,
            topic, duration, composition, background, voice
        )
    
    async def process_message_async(self, user_message: str, session_id: str) -> str:
        """
        X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng v√† quy·∫øt ƒë·ªãnh h√†nh ƒë·ªông
        
        Args:
            user_message: Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
            session_id: ID session chat
            
        Returns:
            str: JSON response ho·∫∑c text response
        """
        try:
            print(f"ü§ñ [FLOW] Processing message: {user_message}")
            
            # Ph√¢n t√≠ch tin nh·∫Øn ƒë·ªÉ x√°c ƒë·ªãnh intent
            intent = self._analyze_message_intent(user_message)
            
            if intent["type"] == "create_video":
                # Redirect ƒë·∫øn endpoint realtime ƒë·ªÉ c√≥ progress updates
                return json.dumps({
                    "type": "redirect_video_creation",
                    "message": f"ƒêang kh·ªüi t·∫°o t·∫°o video v·ªÅ: {intent['topic']}",
                    "video_request": {
                        "topic": intent["topic"],
                        "duration": intent.get("duration", 30),
                        "composition": intent.get("composition", "Scene-Portrait"),
                        "background": intent.get("background", "abstract"),
                        "voice": intent.get("voice", "fable")
                    }
                })
                

            
            else:
                # X·ª≠ l√Ω tin nh·∫Øn th∆∞·ªùng b·∫±ng LLM
                return await self._process_general_message(user_message, session_id)
                
        except Exception as e:
            print(f"‚ùå [FLOW] Error processing message: {str(e)}")
            return json.dumps({
                "type": "error",
                "message": f"C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn: {str(e)}",
                "error": str(e)
            })
    
    def _analyze_message_intent(self, message: str) -> Dict[str, Any]:
        """
        Ph√¢n t√≠ch intent c·ªßa tin nh·∫Øn ng∆∞·ªùi d√πng
        
        Args:
            message: Tin nh·∫Øn c·∫ßn ph√¢n t√≠ch
            
        Returns:
            Dict: Th√¥ng tin intent v√† parameters
        """
        message_lower = message.lower()
        
        # Patterns ƒë·ªÉ nh·∫≠n di·ªán y√™u c·∫ßu t·∫°o video
        video_patterns = [
            r"t·∫°o.*video.*v·ªÅ\s+(.+)",
            r"l√†m.*video.*v·ªÅ\s+(.+)",
            r"video.*v·ªÅ\s+(.+)",
            r"h√£y.*t·∫°o.*video.*v·ªÅ\s+(.+)",
            r"t·∫°o.*video.*(.+)",
            r"video.*d√†i\s+(\d+)\s*s.*v·ªÅ\s+(.+)",
            r"video.*(\d+)\s*gi√¢y.*v·ªÅ\s+(.+)"
        ]
        
        for pattern in video_patterns:
            match = re.search(pattern, message_lower)
            if match:
                if "d√†i" in pattern or "gi√¢y" in pattern:
                    # Pattern c√≥ duration
                    duration = int(match.group(1))
                    topic = match.group(2).strip()
                else:
                    # Pattern ch·ªâ c√≥ topic
                    topic = match.group(1).strip()
                    duration = 30  # default
                
                # Tr√≠ch xu·∫•t th√™m th√¥ng tin n·∫øu c√≥
                composition = "Scene-Portrait"
                background = "abstract"
                voice = "fable"
                
                # T√¨m duration n·∫øu ch∆∞a c√≥
                if "d√†i" not in pattern:
                    duration_match = re.search(r"(\d+)\s*gi√¢y", message_lower)
                    if duration_match:
                        duration = int(duration_match.group(1))
                
                return {
                    "type": "create_video",
                    "topic": topic,
                    "duration": duration,
                    "composition": composition,
                    "background": background,
                    "voice": voice
                }
        
        # Kh√¥ng ph·∫£i y√™u c·∫ßu t·∫°o video
        return {
            "type": "general_chat",
            "message": message
        }
    
    async def _process_general_message(self, message: str, session_id: str) -> str:
        """
        X·ª≠ l√Ω tin nh·∫Øn chat th∆∞·ªùng b·∫±ng LLM
        
        Args:
            message: Tin nh·∫Øn ng∆∞·ªùi d√πng
            session_id: ID session
            
        Returns:
            str: Ph·∫£n h·ªìi t·ª´ AI
        """
        try:
            # S·ª≠ d·ª•ng LLM ƒë·ªÉ tr·∫£ l·ªùi
            llm = LLM(model="openai/gpt-4o-mini")
            
            messages = [
                {
                    "role": "system",
                    "content": """B·∫°n l√† Em Linh AI, m·ªôt tr·ª£ l√Ω th√¥ng minh v√† th√¢n thi·ªán. 
                    B·∫°n c√≥ th·ªÉ gi√∫p ng∆∞·ªùi d√πng t·∫°o video, tr√≤ chuy·ªán v√† h·ªó tr·ª£ c√°c t√°c v·ª• kh√°c.
                    
                    Khi ng∆∞·ªùi d√πng mu·ªën t·∫°o video, h√£y h∆∞·ªõng d·∫´n h·ªç s·ª≠ d·ª•ng c√∫ ph√°p nh∆∞:
                    - "t·∫°o video v·ªÅ [ch·ªß ƒë·ªÅ]"
                    - "video d√†i [s·ªë] gi√¢y v·ªÅ [ch·ªß ƒë·ªÅ]"
                    
                    H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán v√† h·ªØu √≠ch."""
                },
                {
                    "role": "user",
                    "content": message
                }
            ]
            
            response = llm.call(messages=messages)
            return response.strip()
            
        except Exception as e:
            print(f"‚ùå [FLOW] Error in general message processing: {str(e)}")
            return f"Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω tin nh·∫Øn c·ªßa b·∫°n: {str(e)}"
    
    def get_flow_status(self, flow_id: str) -> Dict[str, Any]:
        """
        L·∫•y tr·∫°ng th√°i c·ªßa m·ªôt flow
        
        Args:
            flow_id: ID c·ªßa flow
            
        Returns:
            Dict: Th√¥ng tin tr·∫°ng th√°i flow
        """
        if flow_id not in self.active_flows:
            return {
                "success": False,
                "message": "Flow not found",
                "flow_id": flow_id
            }
        
        flow = self.active_flows[flow_id]
        
        return {
            "success": True,
            "flow_id": flow_id,
            "current_step": flow.state.current_step,
            "progress": flow.state.progress,
            "topic": flow.state.topic,
            "duration": flow.state.duration,
            "error_message": flow.state.error_message
        }
    
    def list_active_flows(self) -> Dict[str, Any]:
        """
        Li·ªát k√™ t·∫•t c·∫£ flows ƒëang ho·∫°t ƒë·ªông
        
        Returns:
            Dict: Danh s√°ch flows v√† tr·∫°ng th√°i
        """
        flows_info = {}
        
        for flow_id, flow in self.active_flows.items():
            flows_info[flow_id] = {
                "current_step": flow.state.current_step,
                "progress": flow.state.progress,
                "topic": flow.state.topic,
                "duration": flow.state.duration,
                "error_message": flow.state.error_message
            }
        
        return {
            "success": True,
            "active_flows_count": len(self.active_flows),
            "flows": flows_info
        }
    
    def cleanup_completed_flows(self) -> Dict[str, Any]:
        """
        D·ªçn d·∫πp c√°c flows ƒë√£ ho√†n th√†nh
        
        Returns:
            Dict: Th√¥ng tin v·ªÅ vi·ªác d·ªçn d·∫πp
        """
        completed_flows = []
        
        for flow_id, flow in list(self.active_flows.items()):
            if flow.state.current_step in ["completed", "failed"]:
                completed_flows.append(flow_id)
                del self.active_flows[flow_id]
        
        return {
            "success": True,
            "message": f"Cleaned up {len(completed_flows)} completed flows",
            "cleaned_flows": completed_flows,
            "remaining_flows": len(self.active_flows)
        }
    
    def demonstrate_flow_capabilities(self) -> Dict[str, Any]:
        """
        Demo c√°c kh·∫£ nƒÉng c·ªßa Flow system
        
        Returns:
            Dict: Th√¥ng tin demo v·ªÅ Flow capabilities
        """
        return {
            "success": True,
            "message": "CrewAI Flow System Capabilities",
            "features": {
                "event_driven_architecture": {
                    "description": "Flows s·ª≠ d·ª•ng @start(), @listen(), @router() ƒë·ªÉ t·∫°o event-driven workflows",
                    "benefits": ["R√µ r√†ng v·ªÅ flow control", "D·ªÖ debug", "Scalable"]
                },
                "state_management": {
                    "description": "Pydantic-based state management v·ªõi type safety",
                    "benefits": ["Type safety", "Data validation", "Clear state tracking"]
                },
                "structured_outputs": {
                    "description": "Tr·∫£ v·ªÅ structured JSON responses thay v√¨ plain text",
                    "benefits": ["API integration", "Frontend display", "Data consistency"]
                },
                "error_handling": {
                    "description": "Comprehensive error handling v·ªõi detailed error messages",
                    "benefits": ["Better debugging", "User feedback", "System reliability"]
                },
                "progress_tracking": {
                    "description": "Real-time progress tracking cho long-running workflows",
                    "benefits": ["User experience", "Monitoring", "Timeout management"]
                }
            },
            "video_production_workflow": {
                "steps": [
                    "1. Initialize ‚Üí Validate parameters",
                    "2. Generate Script ‚Üí LLM-based script creation", 
                    "3. Create DB Record ‚Üí Database persistence",
                    "4. Start TTS ‚Üí Text-to-speech conversion",
                    "5. Start Video Render ‚Üí Video generation",
                    "6. Finalize ‚Üí Update database and return response"
                ],
                "output_format": "VideoProductionResponse (JSON)",
                "key_advantages": [
                    "Visibility into each step",
                    "Structured JSON response for frontend",
                    "Error handling at each step",
                    "Progress tracking",
                    "Database integration"
                ]
            },
            "comparison_with_crew": {
                "crew_approach": {
                    "pros": ["Good for agent collaboration", "Built-in agent tools"],
                    "cons": ["Black box execution", "Limited flow control", "Text-only output"]
                },
                "flow_approach": {
                    "pros": [
                        "Clear step-by-step execution",
                        "Structured JSON outputs", 
                        "Better error handling",
                        "Progress tracking",
                        "Event-driven architecture"
                    ],
                    "cons": ["More setup required", "Learning curve"]
                },
                "recommendation": "Use Flows for structured workflows, Crews for agent collaboration"
            }
        }


# Global FlowService instance
flow_service = FlowService() 