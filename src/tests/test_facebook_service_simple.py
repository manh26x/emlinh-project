#!/usr/bin/env python3
"""
Unit tests ƒë∆°n gi·∫£n cho Facebook Service
Test c√°c ch·ª©c nƒÉng c∆° b·∫£n m√† kh√¥ng ph·ª• thu·ªôc v√†o c√°c service kh√°c
"""

import unittest
import os
import sys
from unittest.mock import patch, MagicMock

# Th√™m th∆∞ m·ª•c src v√†o Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

# Import tr·ª±c ti·∫øp FacebookService 
from services.facebook_service import (
    FacebookService, 
    FacebookTokenError, 
    FacebookAPIError,
    create_facebook_service,
    validate_facebook_token
)


class TestFacebookServiceSimple(unittest.TestCase):
    """Test class ƒë∆°n gi·∫£n cho FacebookService"""
    
    def setUp(self):
        """Setup cho m·ªói test case"""
        self.test_token = "test_access_token_123"
        self.test_user_info = {
            "id": "123456789", 
            "name": "Test User",
            "email": "test@example.com"
        }
    
    @patch.dict(os.environ, {}, clear=True)
    def test_init_without_token_should_raise_error(self):
        """Test kh·ªüi t·∫°o FacebookService khi kh√¥ng c√≥ token trong .env"""
        with self.assertRaises(FacebookTokenError) as context:
            FacebookService()
        
        self.assertIn("FACEBOOK_ACCESS_TOKEN kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong .env file", str(context.exception))
    
    @patch.dict(os.environ, {'FACEBOOK_ACCESS_TOKEN': 'test_token_123'})
    @patch('services.facebook_service.requests.request')
    def test_init_with_token_success(self, mock_request):
        """Test kh·ªüi t·∫°o FacebookService th√†nh c√¥ng"""
        # Mock successful token verification
        mock_response = MagicMock()
        mock_response.json.return_value = {"id": "123", "name": "Test User"}
        mock_response.raise_for_status.return_value = None
        mock_request.return_value = mock_response
        
        service = FacebookService()
        
        self.assertEqual(service.access_token, 'test_token_123')
        self.assertEqual(service.api_version, 'v18.0')
    
    @patch('services.facebook_service.requests.request')
    def test_verify_token_success(self, mock_request):
        """Test verify_token th√†nh c√¥ng"""
        mock_response = MagicMock()
        mock_response.json.return_value = {"id": "123", "name": "Test User"}
        mock_response.raise_for_status.return_value = None
        mock_request.return_value = mock_response
        
        service = FacebookService(access_token=self.test_token)
        result = service.verify_token()
        
        self.assertTrue(result)
    
    @patch('services.facebook_service.requests.request') 
    def test_post_text_success(self, mock_request):
        """Test post_text th√†nh c√¥ng"""
        post_response = {"id": "post_123", "message": "Test message"}
        
        # Mock token verification
        mock_response_verify = MagicMock()
        mock_response_verify.json.return_value = {"id": "123", "name": "Test User"}
        mock_response_verify.raise_for_status.return_value = None
        
        # Mock post_text
        mock_response_post = MagicMock()
        mock_response_post.json.return_value = post_response
        mock_response_post.raise_for_status.return_value = None
        
        mock_request.side_effect = [mock_response_verify, mock_response_post]
        
        service = FacebookService(access_token=self.test_token)
        result = service.post_text("Test message")
        
        self.assertEqual(result['id'], 'post_123')
        self.assertEqual(result['message'], 'Test message')
    
    @patch('services.facebook_service.requests.request')
    def test_api_error_handling(self, mock_request):
        """Test x·ª≠ l√Ω l·ªói API"""
        # Mock error response
        mock_response = MagicMock()
        mock_response.json.return_value = {
            "error": {
                "message": "API rate limit exceeded",
                "type": "OAuthException"
            }
        }
        mock_response.raise_for_status.return_value = None
        mock_request.return_value = mock_response
        
        service = FacebookService.__new__(FacebookService)
        service.access_token = self.test_token
        service.api_version = "v18.0"
        service.base_url = "https://graph.facebook.com/v18.0"
        service.logger = MagicMock()
        
        with self.assertRaises(FacebookAPIError) as context:
            service._make_request('me')
        
        self.assertIn("API rate limit exceeded", str(context.exception))
    
    @patch('services.facebook_service.requests.request')
    def test_validate_facebook_token_valid(self, mock_request):
        """Test validate_facebook_token v·ªõi token h·ª£p l·ªá"""
        mock_response = MagicMock()
        mock_response.json.return_value = {"id": "123", "name": "Test User"}
        mock_response.raise_for_status.return_value = None
        mock_request.return_value = mock_response
        
        result = validate_facebook_token("valid_token")
        
        self.assertTrue(result)
    
    @patch('services.facebook_service.requests.request')
    def test_validate_facebook_token_invalid(self, mock_request):
        """Test validate_facebook_token v·ªõi token kh√¥ng h·ª£p l·ªá"""
        mock_response = MagicMock()
        mock_response.json.return_value = {
            "error": {"message": "Invalid token"}
        }
        mock_response.raise_for_status.return_value = None
        mock_request.return_value = mock_response
        
        result = validate_facebook_token("invalid_token")
        
        self.assertFalse(result)


def run_simple_facebook_tests():
    """Ch·∫°y tests ƒë∆°n gi·∫£n cho Facebook Service"""
    print("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y unit tests ƒë∆°n gi·∫£n cho Facebook Service")
    print("=" * 60)
    
    # T·∫°o test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # Th√™m test cases
    suite.addTests(loader.loadTestsFromTestCase(TestFacebookServiceSimple))
    
    # Ch·∫°y tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # T·ªïng k·∫øt
    print("\n" + "=" * 60)
    print(f"üìä T·ªïng k·∫øt: {result.testsRun} tests")
    print(f"‚úÖ Th√†nh c√¥ng: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå Th·∫•t b·∫°i: {len(result.failures)}")
    print(f"üí• L·ªói: {len(result.errors)}")
    
    if result.failures:
        print("\nüîç Chi ti·∫øt l·ªói th·∫•t b·∫°i:")
        for test, error in result.failures:
            print(f"- {test}: {error}")
    
    if result.errors:
        print("\nüí• Chi ti·∫øt l·ªói h·ªá th·ªëng:")
        for test, error in result.errors:
            print(f"- {test}: {error}")
    
    return result.wasSuccessful()


if __name__ == "__main__":
    success = run_simple_facebook_tests()
    sys.exit(0 if success else 1)