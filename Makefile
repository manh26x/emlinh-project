# Makefile cho emlinh-project CI/CD

# Variables
DOCKER_IMAGE_NAME = emlinh-app
DOCKER_TAG = latest
COMPOSE_FILE = docker-compose.yml

# Colors for output
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

.PHONY: help build test deploy clean status logs restart

help: ## Hi·ªÉn th·ªã c√°c l·ªánh c√≥ s·∫µn
	@echo "$(GREEN)Emlinh Project - Makefile Commands$(NC)"
	@echo "=================================="
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "$(YELLOW)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

build: ## Build Docker images
	@echo "$(GREEN)üî® Building Docker images...$(NC)"
	docker compose build --no-cache
	@echo "$(GREEN)‚úÖ Build completed!$(NC)"

test: ## Ch·∫°y tests cho c·∫£ Python v√† Node.js
	@echo "$(GREEN)üß™ Running tests...$(NC)"
	@echo "Testing Python components..."
	cd emlinh_mng && python -m pytest src/tests/ -v || true
	@echo "Testing Node.js components..."
	cd emlinh-remotion && npm run lint || true
	@echo "$(GREEN)‚úÖ Tests completed!$(NC)"

deploy: ## Deploy application v·ªõi Docker Compose
	@echo "$(GREEN)üöÄ Deploying application...$(NC)"
	@make build
	docker compose up -d
	@echo "$(GREEN)‚è≥ Waiting for services to be ready...$(NC)"
	@sleep 30
	@make status
	@echo "$(GREEN)‚úÖ Deployment completed!$(NC)"

dev: ## Ch·∫°y ·ªü development mode
	@echo "$(GREEN)üîß Starting development environment...$(NC)"
	@make setup-env
	docker compose -f docker-compose.yml -f docker-compose.dev.yml up -d
	@make logs

clean: ## D·ªçn d·∫πp containers v√† images
	@echo "$(YELLOW)üßπ Cleaning up...$(NC)"
	docker compose down --remove-orphans --volumes
	@make fix-permissions
	docker system prune -af --volumes
	@echo "$(GREEN)‚úÖ Cleanup completed!$(NC)"

fix-permissions: ## Fix permissions cho mounted directories
	@echo "$(YELLOW)üîß Fixing permissions...$(NC)"
	@chmod +x scripts/fix-permissions.sh 2>/dev/null || true
	@./scripts/fix-permissions.sh

cleanup-workspace: ## Cleanup to√†n b·ªô workspace cho CI/CD
	@echo "$(YELLOW)üßπ Cleaning up workspace...$(NC)"
	@chmod +x scripts/fix-permissions.sh 2>/dev/null || true
	@./scripts/fix-permissions.sh --cleanup-workspace

clean-volumes: ## D·ªçn d·∫πp to√†n b·ªô Docker volumes
	@echo "$(YELLOW)üóëÔ∏è Cleaning up all volumes...$(NC)"
	docker compose down --remove-orphans --volumes
	docker volume rm emlinh_projects_app_data emlinh_projects_audio_data emlinh_projects_model_data || true
	@make fix-permissions
	@echo "$(GREEN)‚úÖ Volumes cleanup completed!$(NC)"

status: ## Ki·ªÉm tra tr·∫°ng th√°i services
	@echo "$(GREEN)üìä Service Status:$(NC)"
	docker compose ps
	@echo ""
	@echo "$(GREEN)üè• Health Check:$(NC)"
	@curl -s http://localhost:5000/health | python3 -m json.tool || echo "$(RED)‚ùå Health check failed$(NC)"

logs: ## Xem logs c·ªßa t·∫•t c·∫£ services
	@echo "$(GREEN)üìã Showing logs...$(NC)"
	docker compose logs -f

logs-app: ## Xem logs c·ªßa main application
	docker compose logs -f emlinh_app

logs-db: ## Xem logs c·ªßa database
	docker compose logs -f postgres

restart: ## Restart t·∫•t c·∫£ services
	@echo "$(YELLOW)üîÑ Restarting services...$(NC)"
	docker compose restart
	@echo "$(GREEN)‚úÖ Services restarted!$(NC)"

stop: ## D·ª´ng t·∫•t c·∫£ services
	@echo "$(YELLOW)‚èπÔ∏è Stopping services...$(NC)"
	docker compose stop
	@echo "$(GREEN)‚úÖ Services stopped!$(NC)"

start: ## Kh·ªüi ƒë·ªông services ƒë√£ d·ª´ng
	@echo "$(GREEN)‚ñ∂Ô∏è Starting services...$(NC)"
	docker compose start
	@echo "$(GREEN)‚úÖ Services started!$(NC)"

shell: ## Truy c·∫≠p shell c·ªßa container ch√≠nh
	docker compose exec emlinh_app bash

db-shell: ## Truy c·∫≠p PostgreSQL shell
	docker compose exec postgres psql -U emlinh_user -d emlinh_db

backup-db: ## Backup database
	@echo "$(GREEN)üíæ Creating database backup...$(NC)"
	docker compose exec postgres pg_dump -U emlinh_user emlinh_db > backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Database backup completed!$(NC)"

restore-db: ## Restore database t·ª´ backup (c·∫ßn specify BACKUP_FILE=filename.sql)
	@if [ -z "$(BACKUP_FILE)" ]; then echo "$(RED)‚ùå Please specify BACKUP_FILE=filename.sql$(NC)"; exit 1; fi
	@echo "$(YELLOW)‚ö†Ô∏è Restoring database from $(BACKUP_FILE)...$(NC)"
	docker compose exec -T postgres psql -U emlinh_user -d emlinh_db < $(BACKUP_FILE)
	@echo "$(GREEN)‚úÖ Database restore completed!$(NC)"

install-deps: ## C√†i ƒë·∫∑t dependencies local cho development
	@echo "$(GREEN)üì¶ Installing dependencies...$(NC)"
	cd emlinh_mng && pip install -r requirements.txt
	cd emlinh-remotion && npm install
	@echo "$(GREEN)‚úÖ Dependencies installed!$(NC)"

setup-env: ## T·∫°o file .env t·ª´ template
	@echo "$(GREEN)‚öôÔ∏è Setting up environment...$(NC)"
	@if [ ! -f ".env" ]; then \
		echo "Creating .env file..."; \
		echo "# Core application settings" > .env; \
		echo "SECRET_KEY=dev-secret-key-change-in-production" >> .env; \
		echo "DATABASE_URL=sqlite:///app.db" >> .env; \
		echo "FLASK_ENV=development" >> .env; \
		echo "" >> .env; \
		echo "# Workspace configuration" >> .env; \
		echo "WORKSPACE_ROOT=$$(pwd)" >> .env; \
		echo "" >> .env; \
		echo "# AI/ML services" >> .env; \
		echo "OLLAMA_BASE_URL=http://192.168.1.10:11434" >> .env; \
		echo "OLLAMA_EMBED_MODEL=nomic-embed-text" >> .env; \
		echo "EMBEDDING_DIMENSION=768" >> .env; \
		echo "" >> .env; \
		echo "# OpenAI API" >> .env; \
		echo "OPENAI_API_KEY=your-openai-api-key-here" >> .env; \
		echo "" >> .env; \
		echo "# SQLAlchemy settings" >> .env; \
		echo "SQLALCHEMY_ECHO=True" >> .env; \
		cp .env emlinh_mng/.env; \
		echo "$(GREEN)‚úÖ .env files created! Please update OPENAI_API_KEY and other settings$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è .env file already exists$(NC)"; \
	fi

lint: ## Ch·∫°y linting cho c·∫£ Python v√† Node.js
	@echo "$(GREEN)üîç Running linters...$(NC)"
	cd emlinh_mng && python -m flake8 src/ || true
	cd emlinh-remotion && npm run lint || true
	@echo "$(GREEN)‚úÖ Linting completed!$(NC)"

security-scan: ## Ch·∫°y security scan
	@echo "$(GREEN)üîí Running security scans...$(NC)"
	cd emlinh_mng && pip-audit || true
	cd emlinh-remotion && npm audit || true
	@echo "$(GREEN)‚úÖ Security scan completed!$(NC)"

monitor: ## Monitor resource usage
	@echo "$(GREEN)üìà Resource Usage:$(NC)"
	docker stats --no-stream

# Production shortcuts
prod-deploy: ## Quick production deployment
	@echo "$(GREEN)üöÄ Production Deployment$(NC)"
	@make clean
	@make build
	@make deploy
	@make status

# Emergency commands
emergency-stop: ## Emergency stop t·∫•t c·∫£ containers
	@echo "$(RED)üö® EMERGENCY STOP$(NC)"
	docker kill $$(docker ps -q) || true
	docker compose down --remove-orphans

emergency-logs: ## Emergency logs dump
	@echo "$(RED)üö® EMERGENCY LOGS DUMP$(NC)"
	mkdir -p emergency_logs_$(shell date +%Y%m%d_%H%M%S)
	docker compose logs > emergency_logs_$(shell date +%Y%m%d_%H%M%S)/all_logs.txt
	docker system events --since 1h > emergency_logs_$(shell date +%Y%m%d_%H%M%S)/docker_events.txt || true
