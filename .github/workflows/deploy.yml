name: Deploy to Self-Hosted Server

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    runs-on: self-hosted
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - name: Pre-checkout permission fix
      run: |
        echo "🔧 Pre-checkout permission fix..."
        
        # Fix toàn bộ workspace trước khi checkout
        sudo chown -R $USER:$USER ${{ github.workspace }} 2>/dev/null || true
        sudo chmod -R 755 ${{ github.workspace }} 2>/dev/null || true
        
        # Xóa specifically các thư mục problematic
        sudo rm -rf ${{ github.workspace }}/public/audios ${{ github.workspace }}/public/models 2>/dev/null || true
        sudo rm -rf ${{ github.workspace }}/emlinh_mng/instance 2>/dev/null || true
        
        # Cleanup Docker resources nếu có
        docker system prune -af 2>/dev/null || true
        
        echo "✅ Pre-checkout permission fix completed"
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        clean: false
        
    - name: Post-checkout directory setup
      run: |
        echo "📁 Setting up directories after checkout..."
        mkdir -p public/audios public/models emlinh_mng/instance
        chmod -R 755 public/ emlinh_mng/instance/ 2>/dev/null || true
        echo "✅ Directory setup completed"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: emlinh-remotion/package-lock.json

    - name: Install Python dependencies
      run: |
        cd emlinh_mng
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: |
        cd emlinh-remotion
        npm ci

    - name: Run Python tests
      run: |
        cd emlinh_mng
        python -m pytest src/tests/ -v || true

    - name: Run Node.js tests
      run: |
        cd emlinh-remotion
        npm run lint || true

    - name: Build Docker images
      run: |
        docker build --target production -t emlinh-app:latest .
        docker system prune -f

  deploy:
    runs-on: self-hosted
    needs: test
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    
    steps:
    - name: Pre-checkout permission fix
      run: |
        echo "🔧 Pre-checkout permission fix for deployment..."
        
        # Stop containers để tránh file locks
        docker compose down --remove-orphans 2>/dev/null || true
        
        # Fix toàn bộ workspace ownership
        sudo chown -R $USER:$USER ${{ github.workspace }} 2>/dev/null || true
        sudo chmod -R 755 ${{ github.workspace }} 2>/dev/null || true
        
        # Xóa specifically các thư mục có thể có permission issues
        sudo rm -rf ${{ github.workspace }}/public/audios ${{ github.workspace }}/public/models 2>/dev/null || true
        sudo rm -rf ${{ github.workspace }}/emlinh_mng/instance 2>/dev/null || true
        
        # Cleanup Docker system
        docker system prune -af --volumes 2>/dev/null || true
        
        echo "✅ Pre-checkout permission fix completed"
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        clean: false

    - name: Create environment file
      run: |
        cat > .env << EOFENV
        # Core application settings
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        FLASK_ENV=production
        
        # Workspace configuration
        WORKSPACE_ROOT=${{ github.workspace }}
        
        # AI/ML services
        OLLAMA_BASE_URL=${{ secrets.OLLAMA_BASE_URL }}
        OLLAMA_EMBED_MODEL=${{ secrets.OLLAMA_EMBED_MODEL || 'nomic-embed-text' }}
        EMBEDDING_DIMENSION=${{ secrets.EMBEDDING_DIMENSION || '768' }}
        
        # OpenAI API
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        
        # SQLAlchemy settings
        SQLALCHEMY_ECHO=${{ secrets.SQLALCHEMY_ECHO || 'False' }}
        EOFENV

    - name: Create necessary directories
      run: |
        mkdir -p public/audios public/models ssl
        mkdir -p emlinh_mng/instance

    - name: Copy environment file to Flask app directory
      run: |
        cp .env emlinh_mng/.env

    - name: Validate environment and workspace setup
      run: |
        echo "🔍 Validating environment setup..."
        echo "WORKSPACE_ROOT: ${{ github.workspace }}"
        echo "Current directory: $(pwd)"
        
        # Validate required directories exist
        if [ ! -d "emlinh_mng" ]; then
          echo "❌ emlinh_mng directory not found"
          exit 1
        fi
        
        if [ ! -d "emlinh-remotion" ]; then
          echo "❌ emlinh-remotion directory not found"
          exit 1
        fi
        
        # Check if .env files exist
        if [ ! -f ".env" ]; then
          echo "❌ Root .env file not found"
          exit 1
        fi
        
        if [ ! -f "emlinh_mng/.env" ]; then
          echo "❌ Flask app .env file not found"
          exit 1
        fi
        
        echo "✅ Environment validation passed"

    - name: Stop existing containers
      run: |
        docker compose down --remove-orphans || true

    - name: Fix permissions before cleanup
      run: |
        echo "🔧 Enhanced permission fix before cleanup..."
        
        # Sử dụng script fix-permissions helper nếu có
        if [ -f "scripts/fix-permissions.sh" ]; then
          chmod +x scripts/fix-permissions.sh 2>/dev/null || true
          ./scripts/fix-permissions.sh || {
            echo "⚠️ Script failed, using enhanced manual fix..."
            
            # Enhanced manual permission fix với force
            sudo bash -c "
              chown -R $USER:$USER public/ emlinh_mng/instance/ 2>/dev/null || true
              chmod -R 755 public/ emlinh_mng/instance/ 2>/dev/null || true
              
              # Tạo lại directories với proper permissions
              mkdir -p public/audios public/models emlinh_mng/instance 2>/dev/null || true
              chown -R $USER:$USER public/ emlinh_mng/instance/ 2>/dev/null || true
              chmod -R 755 public/ emlinh_mng/instance/ 2>/dev/null || true
            " || true
          }
        else
          echo "⚠️ Script not found, using enhanced manual fix..."
          sudo bash -c "
            chown -R $USER:$USER public/ emlinh_mng/instance/ 2>/dev/null || true
            chmod -R 755 public/ emlinh_mng/instance/ 2>/dev/null || true
            
            # Tạo lại directories với proper permissions
            mkdir -p public/audios public/models emlinh_mng/instance 2>/dev/null || true
            chown -R $USER:$USER public/ emlinh_mng/instance/ 2>/dev/null || true
            chmod -R 755 public/ emlinh_mng/instance/ 2>/dev/null || true
          " || true
        fi
        
        echo "✅ Enhanced permission fix completed"

    - name: Remove old images
      run: |
        docker system prune -af --volumes || true

    - name: Build and start services
      run: |
        docker compose build --no-cache
        docker compose up -d

    - name: Wait for services to be healthy
      run: |
        timeout 300 bash -c 'until docker compose ps | grep -q "healthy\|Up"; do sleep 10; done'

    - name: Verify deployment
      run: |
        sleep 30
        curl -f http://localhost:5000/health || exit 1
        echo "✅ Deployment successful!"

    - name: Clean up old Docker resources
      run: |
        docker image prune -af
        docker volume prune -f

    - name: Final cleanup and permission fix
      run: |
        echo "🧹 Final cleanup with enhanced permission management..."
        
        # Enhanced final cleanup với better error handling
        sudo bash -c "
          echo 'Stopping any remaining containers...'
          docker compose down --remove-orphans 2>/dev/null || true
          
          echo 'Fixing workspace ownership recursively...'
          chown -R $USER:$USER . 2>/dev/null || echo 'Warning: Some ownership changes failed'
          chmod -R 755 . 2>/dev/null || echo 'Warning: Some permission changes failed'
          
          echo 'Cleaning problematic directories thoroughly...'
          rm -rf public/audios/* public/models/* emlinh_mng/instance/* 2>/dev/null || true
          
          echo 'Recreating directories with proper permissions...'
          mkdir -p public/audios public/models emlinh_mng/instance 2>/dev/null || true
          chown -R $USER:$USER public/ emlinh_mng/instance/ 2>/dev/null || true
          chmod -R 755 public/ emlinh_mng/instance/ 2>/dev/null || true
          
          echo 'Final cleanup commands completed successfully'
        " || {
          echo "⚠️ Some final cleanup operations failed, but continuing..."
        }
        
        echo "✅ Final cleanup completed"
      if: always()

  notification:
    runs-on: self-hosted
    needs: [test, deploy]
    if: always()
    
    steps:
    - name: Final workspace cleanup
      run: |
        echo "🧹 Final workspace cleanup với enhanced permission handling..."
        
        # Enhanced final cleanup strategy
        sudo bash -c "
          echo 'Stopping all containers and cleaning Docker...'
          docker compose down --remove-orphans --volumes 2>/dev/null || true
          docker system prune -af --volumes 2>/dev/null || true
          
          echo 'Comprehensive workspace permission fix...'
          if [ -d '${{ github.workspace }}' ]; then
            chown -R $USER:$USER '${{ github.workspace }}' 2>/dev/null || echo 'Warning: Failed to change workspace ownership'
            chmod -R 755 '${{ github.workspace }}' 2>/dev/null || echo 'Warning: Failed to change workspace permissions'
            
            # Remove problematic directories completely
            rm -rf '${{ github.workspace }}/public/audios' '${{ github.workspace }}/public/models' '${{ github.workspace }}/emlinh_mng/instance' 2>/dev/null || true
          fi
          
          echo 'Enhanced final cleanup commands completed'
        " || {
          echo "⚠️ Enhanced cleanup completed with some warnings (expected)"
        }
        
        echo "✅ Enhanced final cleanup completed"
        
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 Deployment thành công!"
          echo "✅ Service emlinh_mng và emlinh-remotion đã được deploy"
          echo "🔗 App URL: http://localhost:5000"
        else
          echo "❌ Deployment thất bại!"
          echo "🔍 Kiểm tra logs để xem chi tiết lỗi"
          exit 1
        fi
